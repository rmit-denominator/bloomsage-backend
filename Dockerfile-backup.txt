# syntax=docker/dockerfile:1

# Use the TensorFlow Docker image as the base image.
ARG TENSORFLOW_VERSION=latest
FROM tensorflow/tensorflow:${TENSORFLOW_VERSION} as base

# Add deadsnakes PPA to get Python 3.10
RUN apt-get update && apt-get install -y software-properties-common
RUN add-apt-repository ppa:deadsnakes/ppa

# Install Python 3.10
RUN apt-get update && apt-get install -y python3.10 python3.10-distutils

# Install pip for Python 3.10
RUN curl https://bootstrap.pypa.io/get-pip.py | python3.10

# Make python3 link to Python 3.10 instead of the default version
RUN rm /usr/bin/python3 && ln -s /usr/bin/python3.10 /usr/bin/python3

RUN curl https://sh.rustup.sh -sSf | bash -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}" 

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

WORKDIR /app

COPY requirements.txt /app

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
RUN pip install --upgrade pip
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=requirements.txt,target=requirements.txt \
    python -m pip install -r requirements.txt

# Copy the source code into the container.
COPY . .

# Initialize the model and dataset
RUN python ml_fetch.py

# Expose the port that the application listens on.
EXPOSE 8000

# Run the application.
CMD uvicorn 'main:app' --host=0.0.0.0 --port=8000
